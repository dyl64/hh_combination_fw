stages:
  - build
  - process
  - combine
  - plotting
  - download

image: atlasadc/atlas-grid-centos7

hhCompile:
  stage: build
  tags:
    # Make you job be executed in a shared runner that has CVMFS mounted
    - cvmfs
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    GIT_SSL_NO_VERIFY: "true"
  script:
    - set +e
    - shopt -s expand_aliases
    - export ATLAS_LOCAL_ROOT_BASE=/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase
    - alias setupATLAS='source ${ATLAS_LOCAL_ROOT_BASE}/user/atlasLocalSetup.sh'
    - base_path=$(pwd)
    - git status
    - cd $base_path
    - source compile.sh
    - source setup.sh
  artifacts:
    paths:
      - submodules
      - python_modules
      - scripts
      - setup.sh

.IStep1:
  stage: process
  tags:
    # Make you job be executed in a shared runner that has CVMFS mounted
    - cvmfs
  needs:
    - job: hhCompile
  variables:
    GIT_SSL_NO_VERIFY: "true"
    input_dir: input
  before_script:
    - set +e
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - eval "$(ssh-agent -s)"
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - echo "lxplus.cern.ch, ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBPZvfRF+9L7TR3FRPyLFdcsXSZ6RQYJHfOjzzWB94sX0gP34Cgij9p4ukL900sVVvw3LPM5OxxFSNIXGztFYu4o=" > ~/.ssh/known_hosts
    - echo -e "Host *\n\tGSSAPIDelegateCredentials yes\n\tGSSAPITrustDNS yes\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
    - echo $SERVICE_PASS | kinit -f $CERN_USER || echo something
    - mkdir -p $input_dir/$version
    - scp -r -i ~/.ssh/id_rsa ${CERN_USER}@lxplus.cern.ch:/afs/cern.ch/work/z/zhangr/HHcomb/FullRun2Workspaces/original/$version/* $input_dir/$version/
    - ls $input_dir/$version/*/nonres/0.root
    - shopt -s expand_aliases
    - export ATLAS_LOCAL_ROOT_BASE=/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase
    - alias setupATLAS='source ${ATLAS_LOCAL_ROOT_BASE}/user/atlasLocalSetup.sh'
    - echo $input_dir/$version
    - source setup.sh || echo ignore setupATLAS return code
  artifacts:
    paths:
      - $output_dir

.IStep2:
  tags:
    # Make you job be executed in a shared runner that has CVMFS mounted
    - cvmfs
  stage: combine
  variables:
    GIT_SSL_NO_VERIFY: "true"
    input_dir: output
  before_script:
    - set +e
    - shopt -s expand_aliases
    - export ATLAS_LOCAL_ROOT_BASE=/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase
    - alias setupATLAS='source ${ATLAS_LOCAL_ROOT_BASE}/user/atlasLocalSetup.sh'
    - source setup.sh || echo ignore setupATLAS return code
  artifacts:
    paths:
      - $input_dir

###################################
## Non-resonant Process channels ##
###################################
.NRProcess:
  extends: .IStep1
  tags:
    # Make you job be executed in a shared runner that has CVMFS mounted
    - cvmfs
  variables:
    output_dir: output/NR
    mini_option: default.json
    version: CONF2021/20210922
    other_options: ""
  allow_failure: true
  script:
    - echo HHComb process_channels -i $input_dir/$version -c $channel -r nonres -o $output_dir --minimizer_options configs/minimizer_options/$mini_option  --config configs/task_options/CONF2021/nonres_v6_mH125_CI.yaml  --do-limit --skip-likelihood --experimental
    - HHComb process_channels -i $input_dir/$version -c $channel -r nonres -o $output_dir --minimizer_options configs/minimizer_options/$mini_option  --config configs/task_options/CONF2021/nonres_v6_mH125_CI.yaml  --do-limit --skip-likelihood --experimental

NR_mu_pro:
  needs:
    - job: hhCompile
  tags:
    # Make you job be executed in a shared runner that has CVMFS mounted
    - cvmfs
  extends: .NRProcess
  variables:
    output_dir: output/NR_blind
    channel: bbbb,bbtautau,bbyy,bbll,bbVV,WWWW
  only:
    - branches
    - tags

###################################
## None-resonant combination     ##
###################################
# Default is correlated (bbtautau and bbyy)
.NRCombine_ws:
  extends: .IStep2
  tags:
    # Make you job be executed in a shared runner that has CVMFS mounted
    - cvmfs
  variables:
    mini_option: default.json
    np_option: CONF2021/nonres_v10.json
    other_options: ""
  allow_failure: true
  script:
    - echo HHComb combine_ws -i $input_dir -c $channels -r nonres --minimizer_options configs/minimizer_options/$mini_option --scheme configs/correlation_schemes/$np_option --do-limit --skip-likelihood $other_options --experimental
    - HHComb combine_ws -i $input_dir -c $channels -r nonres --minimizer_options configs/minimizer_options/$mini_option --scheme configs/correlation_schemes/$np_option --do-limit --skip-likelihood $other_options --experimental
  only:
    - tags
    - master
    - CI

# For sensitivity study
NR_BTY_comb_blind:
  needs:
    - job: hhCompile
    - job: NR_mu_pro
  extends: .NRCombine_ws
  tags:
    # Make you job be executed in a shared runner that has CVMFS mounted
    - cvmfs
  variables:
    input_dir: output/NR_blind
    channels: bbbb,bbtautau,bbyy

NR_ALL6_comb_blind:
  needs:
    - job: hhCompile
    - job: NR_mu_pro
  extends: .NRCombine_ws
  tags:
    # Make you job be executed in a shared runner that has CVMFS mounted
    - cvmfs
  variables:
    input_dir: output/NR_blind
    channels: bbbb,bbtautau,bbyy,bbll,bbVV,WWWW

NR_N-ll_comb_blind:
  needs:
    - job: hhCompile
    - job: NR_mu_pro
  extends: .NRCombine_ws
  tags:
    # Make you job be executed in a shared runner that has CVMFS mounted
    - cvmfs
  variables:
    input_dir: output/NR_blind
    channels: bbbb,bbtautau,bbyy,bbVV,WWWW

NR_N-VV_comb_blind:
  needs:
    - job: hhCompile
    - job: NR_mu_pro
  extends: .NRCombine_ws
  tags:
    # Make you job be executed in a shared runner that has CVMFS mounted
    - cvmfs
  variables:
    input_dir: output/NR_blind
    channels: bbbb,bbtautau,bbyy,bbll,WWWW

NR_N-WW_comb_blind:
  needs:
    - job: hhCompile
    - job: NR_mu_pro
  extends: .NRCombine_ws
  tags:
    # Make you job be executed in a shared runner that has CVMFS mounted
    - cvmfs
  variables:
    input_dir: output/NR_blind
    channels: bbbb,bbtautau,bbyy,bbll,bbVV

###################################
## Plotting                      ##
###################################
.plot:
  stage: plotting
  tags:
    # Make you job be executed in a shared runner that has CVMFS mounted
    - cvmfs
  variables:
    GIT_SSL_NO_VERIFY: "true"
    configuration: project3000
  before_script:
    - set +e
    - shopt -s expand_aliases
    - export ATLAS_LOCAL_ROOT_BASE=/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase
    - alias setupATLAS='source ${ATLAS_LOCAL_ROOT_BASE}/user/atlasLocalSetup.sh'
    - source setup.sh || echo ignore setupATLAS return code
  allow_failure: true
  only:
    - tags
    - master
    - CI

NRPlot:
  extends: .plot
  needs:
    - job: hhCompile
    - job: NR_BTY_comb_blind
    - job: NR_ALL6_comb_blind
    - job: NR_N-ll_comb_blind
    - job: NR_N-VV_comb_blind
    - job: NR_N-WW_comb_blind
  tags:
    # Make you job be executed in a shared runner that has CVMFS mounted
    - cvmfs
  variables:
    input_dir: output/NR_blind
  script:
    # Plot nonres signal strength (mu)
    - echo python plotting/new/combine_plot_6chan.py -a -i $input_dir
    - python plotting/new/combine_plot_6chan.py -a -i $input_dir
  artifacts:
    paths:
      - $input_dir/figures


#####################################
## Intermediate output to download ##
#####################################
Artifacts:
  stage: download
  tags:
    # Make you job be executed in a shared runner that has CVMFS mounted
    - cvmfs
  variables:
    GIT_SSL_NO_VERIFY: "true"
    output: output
  allow_failure: true
  script:
    - ls
  only:
    - tags
    - master
    - CI
  artifacts:
    paths:
      - $output
